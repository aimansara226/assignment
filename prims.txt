import pandas as pd
def createAdjMatrix(V, G):
  
  adjMatrix = []
  
  
  for i in range(0, V):
    adjMatrix.append([])
    for j in range(0, V):
      adjMatrix[i].append(99)
      
  
  for i in range(0, len(G)):
    adjMatrix[G[i][0]][G[i][1]] = G[i][2]
    adjMatrix[G[i][1]][G[i][0]] = G[i][2]
    
  return adjMatrix

def prims(V, G):
  
 
  adjMatrix = createAdjMatrix(V, G)
  
  
  vertex = 0
  
  
  MST = []
  edges = []
  visited = []
  minEdge = [None,None,float('inf')]
  
  
  while len(MST) != V-1:
    
    
    visited.append(vertex)
    
   
    for r in range(0, V):
      if adjMatrix[vertex][r] != 99:
        edges.append([vertex,r,adjMatrix[vertex][r]])
        
    
    for e in range(0, len(edges)):
      if edges[e][2] < minEdge[2] and edges[e][1] not in visited:
        minEdge = edges[e]
        
   
    edges.remove(minEdge)

    
    MST.append(minEdge)
      
    sum=0
    vertex = minEdge[1]
    minEdge = [None,None,float('inf')]
    for i in range(0,len(MST)):
        sum=sum +MST[i][2]
  print("length of spanning tree is:",sum) 
  df=pd.DataFrame(MST)
  df
  print(df)
  

nagpur,pune,jaipur,ahmedabad,hyderabad,shimla,banglore,goa,mumbai,delhi=0,1,2,3,4,5,6,7,8,9

graph = [
  [nagpur,pune,706],
  [nagpur,jaipur,951],
  [nagpur,mumbai,804],
  [nagpur,delhi,1078],
  
  [pune,jaipur,1170],
  [pune,hyderabad,562],
  [pune,banglore,840],
  [jaipur,ahmedabad,677],
  
  [jaipur,delhi,281],
 
  [ahmedabad,mumbai,524],
  
  [ahmedabad,goa,1095],
  [ahmedabad,hyderabad,1220],
  
  [hyderabad,shimla,1938],
 
  [hyderabad,banglore,575],
  
  [shimla,banglore,2526],
  [shimla,delhi,341],
 
  [banglore,goa, 566],
  [banglore,mumbai,980],
  
 
  [goa,mumbai,584],
  
  
  [mumbai,delhi,1423],
  [mumbai,banglore,980],
  
 
 
  
  
  
]


prims(10, graph)  